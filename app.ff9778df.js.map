{"version":3,"sources":["src/scripts/content.js","src/scripts/goods.js","src/scripts/render.js","src/scripts/app.js"],"names":["anime","title","desc","year","type","series","genres","animeNews","date","animeAdt","animeLastUpdate","ageRating","Content","req","fetch","method","headers","then","res","json","validData","id","data","body","JSON","stringify","console","log","Object","keys","map","el","timeConverter","timestamp","a","Date","time","getFullYear","month","getMonth","getDate","hour","getHours","min","getMinutes","sec","getSeconds","createValidObj","obj","forEach","fild","key","filter","i","item","join","goods","hash","window","location","substring","document","querySelector","getAnime","innerHTML","_toHTMLbasicItem","img","_toHTMLAnimeCard","addToWebList","sel","html","getData","insertAdjacentHTML","addEventListener"],"mappings":"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","file":"app.ff9778df.js","sourceRoot":"..","sourcesContent":["let anime = [\r\n  {\r\n    title: 'Naruto',\r\n    desc: 'Это история, в которой рассказывается про мальчика-ниндзя. Он мечтает стать Хокаге: главой своей деревни. Но Хокаге – это самый мудрый и сильный ниндзя деревни, поэтому парень попытается преодолеть кучу испытаний, победить множество противников, заслужить уважение, подрасти морально и физически.',\r\n    year: 1997,\r\n    type: 'serial',\r\n    series: 220,\r\n    genres: [],\r\n  },\r\n  {\r\n    title: 'Onepunchman',\r\n    desc: 'Это история, в которой рассказывается про мальчика-ниндзя. Он мечтает стать Хокаге: главой своей деревни. Но Хокаге – это самый мудрый и сильный ниндзя деревни, поэтому парень попытается преодолеть кучу испытаний, победить множество противников, заслужить уважение, подрасти морально и физически.',\r\n    year: 1997,\r\n    type: 'serial',\r\n    series: 220,\r\n    genres: [],\r\n  },\r\n  {\r\n    title: 'Solo leveling',\r\n    desc: 'Это история, в которой рассказывается про мальчика-ниндзя. Он мечтает стать Хокаге: главой своей деревни. Но Хокаге – это самый мудрый и сильный ниндзя деревни, поэтому парень попытается преодолеть кучу испытаний, победить множество противников, заслужить уважение, подрасти морально и физически.',\r\n    year: 1997,\r\n    type: 'serial',\r\n    series: 220,\r\n    genres: [],\r\n  },\r\n  {\r\n    title: 'Boruto',\r\n    desc: 'Это история, в которой рассказывается про мальчика-ниндзя. Он мечтает стать Хокаге: главой своей деревни. Но Хокаге – это самый мудрый и сильный ниндзя деревни, поэтому парень попытается преодолеть кучу испытаний, победить множество противников, заслужить уважение, подрасти морально и физически.',\r\n    year: 1997,\r\n    type: 'serial',\r\n    series: 220,\r\n    genres: [],\r\n  },\r\n  {\r\n    title: 'One Peace',\r\n    desc: 'Это история, в которой рассказывается про мальчика-ниндзя. Он мечтает стать Хокаге: главой своей деревни. Но Хокаге – это самый мудрый и сильный ниндзя деревни, поэтому парень попытается преодолеть кучу испытаний, победить множество противников, заслужить уважение, подрасти морально и физически.',\r\n    year: 1997,\r\n    type: 'serial',\r\n    series: 220,\r\n    genres: [],\r\n  },\r\n  {\r\n    title: 'Bleach',\r\n    desc: 'Это история, в которой рассказывается про мальчика-ниндзя. Он мечтает стать Хокаге: главой своей деревни. Но Хокаге – это самый мудрый и сильный ниндзя деревни, поэтому парень попытается преодолеть кучу испытаний, победить множество противников, заслужить уважение, подрасти морально и физически.',\r\n    year: 1997,\r\n    type: 'serial',\r\n    series: 220,\r\n    genres: [],\r\n  },\r\n  {\r\n    title: 'Hunter x Hunter',\r\n    desc: 'Это история, в которой рассказывается про мальчика-ниндзя. Он мечтает стать Хокаге: главой своей деревни. Но Хокаге – это самый мудрый и сильный ниндзя деревни, поэтому парень попытается преодолеть кучу испытаний, победить множество противников, заслужить уважение, подрасти морально и физически.',\r\n    year: 1997,\r\n    type: 'serial',\r\n    series: 220,\r\n    genres: [],\r\n  },\r\n  {\r\n    title: 'God tower',\r\n    desc: 'Это история, в которой рассказывается про мальчика-ниндзя. Он мечтает стать Хокаге: главой своей деревни. Но Хокаге – это самый мудрый и сильный ниндзя деревни, поэтому парень попытается преодолеть кучу испытаний, победить множество противников, заслужить уважение, подрасти морально и физически.',\r\n    year: 1997,\r\n    type: 'serial',\r\n    series: 220,\r\n    genres: [],\r\n  },\r\n]\r\nlet animeNews = [\r\n  {\r\n    title: 'С 12 апреля сайт снова заблокировали в РФ (обн. 15.04)',\r\n    date: '13 Мая',\r\n  },\r\n  { title: 'Блокировка сайта в Казахстане (обновлено 16.04)', date: '12 Апр' },\r\n  { title: 'Запреты аниме (только) в РФ (обновлено 17.05)', date: '12 Мар' },\r\n  { title: 'Семь универсальных сюжетов ч.2', date: '3 Мар' },\r\n  { title: 'Семь универсальных сюжетов ч.1', date: '1 Мар' },\r\n  { title: 'Студия «Ghibli»', date: '23 Фев' },\r\n]\r\nlet animeAdt = {\r\n  title: 'Фантастический мир с обращённым в красавицу мужчиной и…',\r\n  date: '10 Мая',\r\n  genres: ['Комедия', 'Романтика', 'Приключения', 'Фантастика'],\r\n}\r\nlet animeLastUpdate = {\r\n  title: 'Король бойцов: на другой день',\r\n  year: '2005',\r\n  type: 'ONA',\r\n  series: '4',\r\n  genres: ['Сёнэн', 'Драма', 'Приключения'],\r\n  ageRating: 'PG-13(от 13 лет)',\r\n}\r\n\r\nexport class Content {\r\n  static getData(req) {\r\n    return fetch(\r\n      `https://anime-sitee-default-rtdb.firebaseio.com/${req}.json`,\r\n      {\r\n        method: 'GET',\r\n        headers: {\r\n          'Content-Type': 'aplication/json',\r\n        },\r\n      }\r\n    )\r\n      .then((res) => res.json())\r\n      .then(validData)\r\n  }\r\n  static getAnime(id) {\r\n    return fetch(\r\n      `https://anime-sitee-default-rtdb.firebaseio.com/animes/${id}.json`,\r\n      {\r\n        method: 'GET',\r\n        headers: {\r\n          'Content-Type': 'aplication/json',\r\n        },\r\n      }\r\n    ).then((res) => res.json())\r\n  }\r\n  static setAnime(data, req) {\r\n    return fetch(\r\n      `https://anime-sitee-default-rtdb.firebaseio.com/${req}.json`,\r\n      {\r\n        method: 'POST',\r\n        body: JSON.stringify(data),\r\n        headers: {\r\n          'Content-Type': 'aplication/json',\r\n        },\r\n      }\r\n    )\r\n      .then((res) => res.json())\r\n      .then((body) => console.log(body))\r\n  }\r\n}\r\nfunction validData(data) {\r\n  return data ? Object.keys(data).map((el) => ({ ...data[el], id: el })) : []\r\n}\r\n// Content.setAnime(animeLastUpdate, 'anime-last-update')\r\n// Неиспользуемые ф-ии\r\nfunction timeConverter(timestamp) {\r\n  let a = new Date(timestamp * 1)\r\n  const months = [\r\n    'Янв',\r\n    'Фев',\r\n    'Мар',\r\n    'Апр',\r\n    'Мая',\r\n    'Июн',\r\n    'Июл',\r\n    'Авг',\r\n    'Сен',\r\n    'Окт',\r\n    'Ноя',\r\n    'Дек',\r\n  ]\r\n  let year = a.getFullYear()\r\n  let month = months[a.getMonth()]\r\n  let date = a.getDate()\r\n  let hour = a.getHours()\r\n  let min = a.getMinutes()\r\n  let sec = a.getSeconds()\r\n\r\n  let time = {\r\n    year,\r\n    month,\r\n    date,\r\n    hour,\r\n    min,\r\n    sec,\r\n    get getDate() {\r\n      return `${this.date} ${this.month}`\r\n    },\r\n  }\r\n\r\n  return time\r\n}\r\nfunction createValidObj(data) {\r\n  let obj = {}\r\n  data.forEach((el) => {\r\n    let fild = el.id\r\n    for (let key in data) {\r\n      if (data[key].id == fild) {\r\n        obj[fild] = Object.keys(el)\r\n          .filter((i) => i !== 'id')\r\n          .map((item) => el[item])\r\n          .join('')\r\n      }\r\n    }\r\n  })\r\n  return obj\r\n}\r\n","import { Content } from './content'\r\n\r\nexport  function goods() {\r\n  let hash = window.location.hash.substring(1)\r\n  let title = document.querySelector('.anime-title')\r\n  if (!title) return\r\n  Content.getAnime(hash).then((el) => {\r\n    title.innerHTML = el.title\r\n  })\r\n}\r\n\r\n","import { Content } from './content'\r\n\r\nfunction _toHTMLbasicItem(data) {\r\n  let genres = !data.genres\r\n    ? ''\r\n    : data.genres.filter((item) => item !== null).map((el) => `<li>${el}</li>`)\r\n\r\n  return `\r\n      <li class=\"basic__item basic-item\" data-id = ${data.id} >\r\n        <a href=\"anime.html#${data.id}\" class=\"basic-item__link\">\r\n          <span class=\"basic-item__date\">13 мая</span>\r\n          <img\r\n            src=${data.img || ''}\r\n            class=\"basic-item__image\"\r\n            alt=\"\"\r\n          />\r\n          <div class=\"basic-item__desc\">\r\n            <span class=\"basic-item__title\">\r\n              ${data.title} \r\n            </span>\r\n            <span>${genres ? '-' : ''}</span>\r\n            <ul class='basic-item__genres'>${genres}</ul>\r\n          </div>\r\n        </a>\r\n      </li>\r\n  `\r\n}\r\nfunction _toHTMLAnimeCard(data) {\r\n  let genres = !data.genres\r\n    ? ''\r\n    : data.genres\r\n        .filter((item) => item !== null)\r\n        .map((el) => `<li><a href=''>${el}</a></li>`)\r\n  return `\r\n    <article class=\"new-anime__item\">\r\n      <a href=\"anime.html#${data.id}\">\r\n        <img\r\n        class=\"new-anime__img\"\r\n        src=\"${data.img}\"\r\n        alt=\"\"\r\n        />\r\n      </a>\r\n      <div class=\"new-anime__desc\">\r\n        <a href=\"anime.html#${data.id}\" class=\"new-anime__title\"\r\n          >${data.title}</a\r\n        >\r\n        <ul class=\"new-anime__info\">\r\n          <li class=\"new-anime__series\">${data.year} | ${data.type} | Серий: ${data.series}</li>\r\n          <li>\r\n            <b>Жанры:</b>\r\n            <ul class=\"new-anime__genres\">\r\n              ${genres}\r\n            </ul>\r\n          </li>\r\n          <li class=\"new-anime__age\">\r\n            <b>Возрастной рейтинг:</b> ${data.ageRating}\r\n          </li>\r\n        </ul>\r\n      </div>\r\n    </article>\r\n  `\r\n}\r\nexport function addToWebList(sel, req, html) {\r\n  if (!sel) return\r\n  Content.getData(req).then((el) => {\r\n    el.forEach((item) => {\r\n      sel.insertAdjacentHTML('afterbegin', html(item))\r\n    })\r\n  })\r\n}\r\naddToWebList(document.querySelector('.basic__list'), 'animes', _toHTMLbasicItem)\r\naddToWebList(\r\n  document.querySelector('.basic__news-list'),\r\n  'anime-news',\r\n  _toHTMLbasicItem\r\n)\r\naddToWebList(\r\n  document.querySelector('.basic__preview-list'),\r\n  'anime-adt',\r\n  _toHTMLbasicItem\r\n)\r\naddToWebList(\r\n  document.querySelector('.new-anime__container'),\r\n  'anime-last-update',\r\n  _toHTMLAnimeCard\r\n)\r\n","import { Content } from './content'\r\nimport { goods } from './goods'\r\nimport { addToWebList } from './render'\r\n\r\nwindow.addEventListener('load', ()=>{\r\n  // addToWebList()\r\n  goods()\r\n})\r\n"]}